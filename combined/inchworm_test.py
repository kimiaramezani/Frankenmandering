# -*- coding: utf-8 -*-
"""Inchworm_test_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlT3K3UZW8hIVdmjaJOfccR0B0noGqED
"""

!pip install torch_geometric

import numpy as np
import torch
from torch_geometric.data import Data
import gymnasium as gym
from gymnasium import spaces
from gerry_environment_23 import FrankenmanderingEnv
from graph_initiator import build_inchworm_init_data, build_inchworm_soc_init_data
from render_graph import render_graph

def labels_to_action(labels, num_districts, dtype=np.float32):
    """
    Convert an integer label vector (shape [N]) to an action matrix
    expected by env.step: shape (N, num_districts), each row is
    a 1-hot encoding of the desired district for that voter.
    """
    N = len(labels)
    A = np.zeros((N, num_districts), dtype=dtype)
    for i, lab in enumerate(labels):
        if lab >= 0 and lab < num_districts:
            A[i, int(lab)] = 1.0
        else:
            # keep row zeros -> will become -1 label in env.step (avoid if possible)
            pass
    return A

"""#Inch Worm Test"""

import matplotlib.pyplot as plt

def run_inchworm(env, districts, num_districts, drf):
    history = []
    for t, district in enumerate(districts, 1):
        assignment = labels_to_action(district, num_districts)
        # print(assignment)

        obs, reward, terminated, truncated, info = env.step(assignment,drf)

        fig = render_graph(obs)
        plt.show()
        opinions = obs.opinion.squeeze().tolist()
        reps = obs.reps
        history.append((opinions, reps))

        print(f"t={t}, reps={reps}, opinions={opinions}, reward={reward}")
    return history

"""Inchworm with empty social graph"""

def drf_inc_noso(discrepancy):
    delta = abs(discrepancy)

    if 0 == delta:
        return 0  # indifference

    elif 0 < delta < 3:
        return 1  # assimilation (pull closer)

    elif 3 <= delta < 10:
        return -1  # backfire (push away)

    elif 10 <= delta  :
        return 0  # irrelevance (ignored)

    elif delta == 0:
        return 0  # ambivalence

init_inch_data, G_inch = build_inchworm_init_data()
num_voters = init_inch_data.opinion.shape[0]
num_districts = 5
target_opinion = [6,6,6,6,6,6,6,6,6,6]
env = FrankenmanderingEnv(num_voters=num_voters,
                          num_districts=num_districts,
                          FrankenData=init_inch_data,
                          opinion_dim = 1,
                          target_opinion =target_opinion)

obs, _ = env.reset()

districts = [
   [1,2,0,0,4,3,3,4,4,0],
   [1,0,2,0,3,4,4,4,0,3],
   [0,1,2,0,3,3,3,0,4,4],
   [1,2,3,0,0,4,4,4,4,0],
   [2,1,1,1,0,0,4,4,0,3],
   [1,2,2,2,3,0,0,0,4,2],
   [1,1,2,1,3,4,0,0,0,3],
   [1,1,2,1,3,3,4,0,0,0]
]
history = run_inchworm(env, districts, num_districts,drf_inc_noso)

"""Inchworm test with social graph"""

def drf_inchworm_withso(discrepancy):
    delta = abs(discrepancy)

    if 0 <= delta < 2:
        return 0  # indifference

    elif 2 <= delta < 4:
        return 1  # assimilation (pull closer)

    elif 4 <= delta < 6:
        return -1  # backfire (push away)

    elif 6 <= delta  :
        return 0  # irrelevance (ignored)

    elif delta <= 2:
        return 0  # ambivalence

init_inch_soc_data, G_inch = build_inchworm_soc_init_data()

num_voters = init_inch_soc_data.opinion.shape[0]
num_districts = 3

env = FrankenmanderingEnv(num_voters=num_voters,
                          num_districts=num_districts,
                          opinion_dim=1,
                          FrankenData=init_inch_soc_data,
                          target_opinion=[7,7,7,7,7,7])


obs, _ = env.reset()

districts = [
    [0,0,2,1,1,0],
    [0,0,1,1,2,0],
    [0,0,2,1,1,0],
    [0,0,1,1,2,0],
    [0,0,2,1,1,0],
    [0,0,2,2,1,0],
    [0,0,2,1,1,0],
    [0,0,2,2,1,0]
]
history = run_inchworm(env, districts,num_districts, drf_inchworm_withso)

