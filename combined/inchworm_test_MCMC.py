# -*- coding: utf-8 -*-
"""Inchworm_test_11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlT3K3UZW8hIVdmjaJOfccR0B0noGqED
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install torch_geometric

import numpy as np
import torch
from torch_geometric.data import Data
import gymnasium as gym
from gymnasium import spaces
from gerry_environment import FrankenmanderingEnv
from graph_initiator import build_inchworm_init_data, build_inchworm_soc_init_data
# from render_graph import render_graph
from report_gen_4 import plot_summary_each_run,pairwise_hamming_mean, plot_summary_global
from mcmc_baseline_13 import simulated_annealing

"""#Inch Worm Test

Inchworm with empty social graph
"""

def drf_inc_noso(discrepancy):
    delta = abs(discrepancy)

    if 0 == delta:
        return 0  # indifference

    elif 0 < delta < 3:
        return 1  # assimilation (pull closer)

    elif 3 <= delta < 10:
        return -1  # backfire (push away)

    elif 10 <= delta  :
        return 0  # irrelevance (ignored)

    elif delta == 0:
        return 0  # ambivalence

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os, datetime

def run_sa(
    env,
    num_runs,
    results_root,
    T_init,
    T_final,
    hot_steps,
    anneal_steps,
    cold_steps,
    drf,
    beta1,
    beta2,
    p_keep
):

    ts = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    save_dir = os.path.join(results_root, f"mcmc_{ts}_{num_runs}")
    os.makedirs(save_dir, exist_ok=True)
    num_bins = env.num_districts
    target_opinion = env.c_star
    summary = []

    for run_id in range(num_runs):
        seed = 42 + run_id
        env.reset()
        env, labels, rewards, opinions, acc_hist, temps = simulated_annealing(
            env=env,
            hot_steps=hot_steps,
            anneal_steps=anneal_steps,
            cold_steps=cold_steps,
            T_init=T_init,
            T_final=T_final,
            seed=seed,
            drf=drf,
            beta1=beta1,
            beta2=beta2,
            p_keep=p_keep,
        )
        rewards = np.array(rewards, dtype=float)
        opinions = np.array(opinions, dtype=float)

        final_reward = float(rewards[-1])
        chain_length = len(rewards)
        avg_accept_rate = float(np.mean(acc_hist)) if len(acc_hist) > 0 else 0.0

        # --- Opinion-based metrics ---
        op0 = float(np.mean(opinions[0]))
        opf = float(np.mean(opinions[-1]))
        delta_opinion = opf - op0
        # Ideal distance (target or scalar)
        avg_dist_from_ideal = float(np.mean(np.abs(opinions[-1] - target_opinion)))
        # === Ratio of opinion shift per accepted proposal ===
        # global mean change per accepted proposal
        ratio_shift_macro = abs(delta_opinion) / max(1, chain_length)

        # verage per-step absolute opinion change
        if opinions.shape[0] > 1:
            op_diffs = [np.mean(np.abs(opinions[t] - opinions[t-1])) for t in range(1, len(opinions))]
            ratio_shift_micro = np.mean(op_diffs)
        else:
            ratio_shift_micro = 0.0

        summary.append({
            "run_id": run_id + 1,
            "seed": seed,
            "final_reward": final_reward,
            "avg_accept_rate": avg_accept_rate,
            "chain_length": chain_length,
            "initial_mean_opinion": op0,
            "final_mean_opinion": opf,
            "delta_opinion": delta_opinion,
            "avg_dist_from_ideal": avg_dist_from_ideal,
            "ratio_shift_macro": ratio_shift_macro,
            "ratio_shift_micro": ratio_shift_micro,
        })


        plot_summary_each_run(run_id, save_dir, num_bins, rewards, acc_hist, opinions)


        # --- Save per-run data ---
        np.savez(
            os.path.join(save_dir, f"run_{run_id+1}.npz"),
            rewards=rewards,
            opinions=opinions,
            acc_hist=np.array(acc_hist),
            temps=np.array(temps),
            labels=np.array(labels, dtype=object),
        )

    # ---- Save summary to CSV ----
    df = pd.DataFrame(summary)
    csv_path = os.path.join(save_dir, "summary.csv")
    df.to_csv(csv_path, index=False)

    metric_map = {
        "mean_opinion": "final_mean_opinion",
        "delta_opinion": "delta_opinion",
        "avg_dist_from_ideal": "avg_dist_from_ideal",
        "ratio_shift_micro": "ratio_shift_micro",
    }
    ylabels = {
        "mean_opinion": "Final Mean Opinion",
        "delta_opinion": "Opinion Shift ",
        "avg_dist_from_ideal": "Avg Distance from Ideal",
        "ratio_shift_micro": "Avg per-step Opinion Change",
    }

    plot_summary_global(save_dir,num_runs, df, metric_map,ylabels)

    metric_map = {
        "mean_opinion": "final_mean_opinion",
        "delta_opinion": "delta_opinion",
        "avg_dist_from_ideal": "avg_dist_from_ideal",
        "ratio_shift_micro": "ratio_shift_micro",
    }
    ylabels = {
        "mean_opinion": "Final Mean Opinion",
        "delta_opinion": "Opinion Shift ",
        "avg_dist_from_ideal": "Avg Distance from Ideal",
        "ratio_shift_micro": "Avg per-step Opinion Change",
    }


    return df, save_dir

# ---- Setup initial data for inchworm without social edge ----
init_inch_data, G_inch = build_inchworm_init_data()
num_voters = init_inch_data.opinion.shape[0]
num_districts = 5
target_opinion_noso = [6,6,6,6,6,6,6,6,6,6]
env_noso = FrankenmanderingEnv(num_voters=num_voters,
                          num_districts=num_districts,
                          FrankenData=init_inch_data,
                          opinion_dim = 1,
                          target_opinion =target_opinion_noso)
# obs_noso, _ = env_noso.reset()

run_sa(env_noso,
    num_runs = 100,
    results_root = "/content/drive/My Drive/inchresults_noso",
    T_init = 0.8,
    T_final = 1e-3,
    hot_steps =20,
    anneal_steps = 40,
    cold_steps = 20,
    drf = drf_inc_noso,
    beta1 = 0.1,
    beta2 = 0.5,
    p_keep = 0.45)

"""Inchworm test with social graph"""

def drf_inchworm_withso(discrepancy):
    delta = abs(discrepancy)

    if 0 <= delta < 2:
        return 0  # indifference

    elif 2 <= delta < 4:
        return 1  # assimilation (pull closer)

    elif 4 <= delta < 6:
        return -1  # backfire (push away)

    elif 6 <= delta  :
        return 0  # irrelevance (ignored)

    elif delta <= 2:
        return 0  # ambivalence

init_inch_soc_data, G_inch = build_inchworm_soc_init_data()

num_voters = init_inch_soc_data.opinion.shape[0]
num_districts = 3

env_sco = FrankenmanderingEnv(num_voters=num_voters,
                          num_districts=num_districts,
                          opinion_dim=1,
                          FrankenData=init_inch_soc_data,
                          target_opinion=[7,7,7,7,7,7])


# obs_sco, _ = env_sco.reset()

run_sa(env_sco,
    num_runs = 100,
    results_root = "/content/drive/My Drive/inchresults_soc",
    T_init = 0.2,
    T_final = 1e-4,
    hot_steps =20,
    anneal_steps = 40,
    cold_steps = 20,
    drf = drf_inchworm_withso,
    beta1 = 0.1,
    beta2 = 0.5,
    p_keep = 0.3)

